git status
git add .gitignore
git add gui_resourceless/
git add *
git commit
git push
git reset HEAD **/lib
git reset HEAD **/*.lps
git clone https://github.com/sallecta/laz_code_samples.git
git pull laz_code_samples master
git fetch laz_code_samples
git remote add laz_code_samples https://github.com/sallecta/laz_code_samples.git
git remote -v
git init
git config --list


remove commit
https://stackoverflow.com/a/46724280


There are two alternatives to this: the safe one that leaves you with a dirty git history, or the unsafe one that leaves you with a clean git history. You pick:
Option 1: Revert

You can tell git to "Revert a commit". This means it will introduce a change that reverts each change you made in a commit. You would need to execute it twice (once per commit):

git revert 98y65r4
git revert 987xcrt

This solution will leave your git history like this (you can execute gitk --all to see a graphical representation of the state of your repo):

2222222    revert of 987xcrt: this commit is not required
1111111    revert of 98y65r4: this commit is not required
abcd123    some message
xyze456    another commit message
98y65r4    this commit is not required
987xcrt    this commit is not required
bl8976t    initial commit

Then you can push the new 2 commits to your remote repo:

git push

This solution is safe because it does not make destructive operations on your remote repo.
Option 2: Interactive rebase

You also can use an interactive rebase for that. The command is:

git rebase -i bl8976t

In it, you are telling git to let you select which commits you want to mix together, reorder or remove.

When you execute the command an editor will open with a text similar to this:

pick    bl8976t    initial commit
pick    987xcrt    this commit is not required
pick    98y65r4    this commit is not required
pick    xyze456    another commit message
pick    abcd123    some message

Just go on and delete the lines you don't want, like this:

pick    bl8976t    initial commit
pick    xyze456    another commit message
pick    abcd123    some message

Save the file and close the editor.

So far, this has only modified the local copy of your repository (you can see the tree of commits with gitk --all).

Now you need to push your changes to your repo, which is done with a "push force", but before you execute the command bear in mind that push force is a destructive operation, it will overwrite the history of your remote repository and can cause merge troubles to other people working on it. If you are ok and want to do the push force, the command is:

git push -f




Remove all commits

Check out to a temporary branch:
git checkout --orphan TEMP_BRANCH

Add all the files:
git add -A

Commit the changes:
git commit -am "Initial commit"

Delete the old branch:
git branch -D master

Rename the temporary branch to master:
git branch -m master

Finally, force update to our repository:
git push -f origin master


VERSIONS
git describe HEAD

Tagging Later

You can also tag commits after you’ve moved past them. Suppose your commit history looks like this:

$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme

Now, suppose you forgot to tag the project at v1.2, which was at the “updated rakefile” commit. You can add it after the fact. To tag that commit, you specify the commit checksum (or part of it) at the end of the command:

$ git tag -a v1.2 9fceb02


Push tag
git push origin 0.1
 * [new tag]         0.1 -> 0.1


